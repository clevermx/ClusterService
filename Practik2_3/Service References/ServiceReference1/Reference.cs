//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Practik2_3.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataInstance", Namespace="http://schemas.datacontract.org/2004/07/ClusterizationService")]
    [System.SerializableAttribute()]
    public partial class DataInstance : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] attributesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int clusterField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] attributes {
            get {
                return this.attributesField;
            }
            set {
                if ((object.ReferenceEquals(this.attributesField, value) != true)) {
                    this.attributesField = value;
                    this.RaisePropertyChanged("attributes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int cluster {
            get {
                return this.clusterField;
            }
            set {
                if ((this.clusterField.Equals(value) != true)) {
                    this.clusterField = value;
                    this.RaisePropertyChanged("cluster");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IkMeans")]
    public interface IkMeans {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkMeans/DoClusters", ReplyAction="http://tempuri.org/IkMeans/DoClustersResponse")]
        void DoClusters(System.Guid client, int pClusterNum, double accuracy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkMeans/DoClusters", ReplyAction="http://tempuri.org/IkMeans/DoClustersResponse")]
        System.Threading.Tasks.Task DoClustersAsync(System.Guid client, int pClusterNum, double accuracy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkMeans/GetInst", ReplyAction="http://tempuri.org/IkMeans/GetInstResponse")]
        Practik2_3.ServiceReference1.DataInstance GetInst(System.Guid clientNum, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkMeans/GetInst", ReplyAction="http://tempuri.org/IkMeans/GetInstResponse")]
        System.Threading.Tasks.Task<Practik2_3.ServiceReference1.DataInstance> GetInstAsync(System.Guid clientNum, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkMeans/SendInst", ReplyAction="http://tempuri.org/IkMeans/SendInstResponse")]
        bool SendInst(System.Guid clientNum, Practik2_3.ServiceReference1.DataInstance d);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkMeans/SendInst", ReplyAction="http://tempuri.org/IkMeans/SendInstResponse")]
        System.Threading.Tasks.Task<bool> SendInstAsync(System.Guid clientNum, Practik2_3.ServiceReference1.DataInstance d);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkMeans/RegisterClient", ReplyAction="http://tempuri.org/IkMeans/RegisterClientResponse")]
        System.Guid RegisterClient(int dataCount, int atrCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkMeans/RegisterClient", ReplyAction="http://tempuri.org/IkMeans/RegisterClientResponse")]
        System.Threading.Tasks.Task<System.Guid> RegisterClientAsync(int dataCount, int atrCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkMeans/isFinished", ReplyAction="http://tempuri.org/IkMeans/isFinishedResponse")]
        bool isFinished();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkMeans/isFinished", ReplyAction="http://tempuri.org/IkMeans/isFinishedResponse")]
        System.Threading.Tasks.Task<bool> isFinishedAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IkMeansChannel : Practik2_3.ServiceReference1.IkMeans, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IkMeansClient : System.ServiceModel.ClientBase<Practik2_3.ServiceReference1.IkMeans>, Practik2_3.ServiceReference1.IkMeans {
        
        public IkMeansClient() {
        }
        
        public IkMeansClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IkMeansClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IkMeansClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IkMeansClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoClusters(System.Guid client, int pClusterNum, double accuracy) {
            base.Channel.DoClusters(client, pClusterNum, accuracy);
        }
        
        public System.Threading.Tasks.Task DoClustersAsync(System.Guid client, int pClusterNum, double accuracy) {
            return base.Channel.DoClustersAsync(client, pClusterNum, accuracy);
        }
        
        public Practik2_3.ServiceReference1.DataInstance GetInst(System.Guid clientNum, int index) {
            return base.Channel.GetInst(clientNum, index);
        }
        
        public System.Threading.Tasks.Task<Practik2_3.ServiceReference1.DataInstance> GetInstAsync(System.Guid clientNum, int index) {
            return base.Channel.GetInstAsync(clientNum, index);
        }
        
        public bool SendInst(System.Guid clientNum, Practik2_3.ServiceReference1.DataInstance d) {
            return base.Channel.SendInst(clientNum, d);
        }
        
        public System.Threading.Tasks.Task<bool> SendInstAsync(System.Guid clientNum, Practik2_3.ServiceReference1.DataInstance d) {
            return base.Channel.SendInstAsync(clientNum, d);
        }
        
        public System.Guid RegisterClient(int dataCount, int atrCount) {
            return base.Channel.RegisterClient(dataCount, atrCount);
        }
        
        public System.Threading.Tasks.Task<System.Guid> RegisterClientAsync(int dataCount, int atrCount) {
            return base.Channel.RegisterClientAsync(dataCount, atrCount);
        }
        
        public bool isFinished() {
            return base.Channel.isFinished();
        }
        
        public System.Threading.Tasks.Task<bool> isFinishedAsync() {
            return base.Channel.isFinishedAsync();
        }
    }
}
